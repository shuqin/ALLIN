/*
 * Note:
 * 1. 创建一个内部类，就像创建任何一个普通类一样，置于某外部类的里面。
 * 2. 关键是内部类的访问机制【语法层面】和用途【存在意义】。
 * 3. 在外部类的非静态方法中，像使用普通类一样使用其内部类。
 * 4. 在外部类的非静态方法之外的任何位置创建该类的内部类对象，
 *    必须具体地指明这个对象的类型（全名限定）。
 * 5. 通常会创建一些外部类的方法中来返回对其内部类对象的引用。   
 * 6. 内部类对象自动拥有对其外部类所有成员的完全访问权。
 * 7. 使用外部类对象的【 外部对象名.new】语法来创建其内部类对象。
 * 8. 在内部类中，使用【外部类名.this】 获得对其外部类对象的引用。
 *    ------ 注意 this 在外部类和内部类中的不同指代。
 *    因此， 在内部类Freight中访问的外部类成员 freights 实际是表示 ShipTask2.this.freights
 * 9. 可见性
 *    ①  某个类的内部类声明为默认访问权限时，该内部类的对象对外部其它类的对象是可见的。
 *    ②  某个类的内部类声明为私有时，该内部类对象对外部其它类对象是不可见的。
 *
 * 10. 通过实现了接口的私有内部类， 非其外部类的其它外部类对象可以间接使用完全不可见的内部类所提供的服务。
 * 11. 可以在任何方法和作用域内部定义内部类，其目的是使用该类的服务同时又希望将该类隐藏起来。
 * 12. 在工厂方法模式中使用匿名内部类，可以改善设计。
 * 13. 如果定义了一个匿名内部类，而该类使用了在其外部定义的对象，则该对象引用必须是final的 
 *
 */
