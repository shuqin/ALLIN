/*
 * Note:
 * 
 *  暂且称在同一编译单元（同一个Java文件内）的非 public 类 为辅助类，public 类为主类；
 *  
 *  那么主类【AccessAuthority】可能有辅助类【Relative】和内部类【Innerclass】。
 *  
 *  辅助类和内部类有什么区别呢？
 *
 *  这里仅从语法的主要方面、设计思路和适用场合进行比较，因为语法上的组合太多了，难以一一测试。
 * 
 *
 *  一、 设计思路与适用场合：
 *
 *  辅助类主要是在包级别的关联与访问控制；它们辅助包内的所有主类更好地完成包级别所提供的服务；
 *  
 *  辅助类最好仅在所属包内进行创建和使用；它们不应暴露在所属包的包外。
 *
 *
 *  内部类主要是在类级的关联和访问控制。
 *
 *  内部类主要与其外部类关联极其紧密，它用来辅助其外部类更好地完成类所提供的服务；
 *
 *  内部类最好仅在所属类的内部进行创建和使用；内部类不应暴露在其外部类的外部；
 *
 *  内部类可以通过实现接口提供有限的服务，但其本身应当是隐身的。
 * 
 *  
 *
 *  二、 语法的主要方面： 
 *
 *  ①  访问修饰符： 
 *    
 *    辅助类前面不能有任何访问修饰符【只能有默认的包访问权限】，
 *    
 *    而Innerclass 可以有 private、public、protected及无修饰符；
 *
 *    
 *  ②  访问主类的私有成员：
 *    
 *     辅助类无法直接访问主类的私有成员（因其只有包访问权限）；
 *     
 *     而内部类能够自由访问其主类的私有成员。
 *
 *
 *  ③  创建权限：   
 *     
 *     （1）包内创建： 可以直接创建包内所有类的对象及其【默认、公共内部类】的对象；
 *
 *          对同一个包的主类和辅助类而言，其区别仅仅在于是否需要将该类暴露在包外。
 *
 *     （2） 包外创建： 
 * 
 *          可以直接创建包外public类的对象及public内部类对象，但无法直接创建包外非public的类的对象。
 * 
 *     （3） 可以在方法中返回对某对象的引用，从而在任何地方都可以间接创建任何对象。    
 *
 *
 *
 *   ④  私有域访问权限：
 *
 *      只有内部类与其外部类能够相互访问其私有域，其它任何外部类都无法访问其它类的私有域。
 *
 *
 */