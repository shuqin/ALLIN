/*
 * 观察者模式：
 * 在对象之间建立一对多的关系，当某一个对象发生变化的时候，相关对象都能得到通知并更新自己。
 * 有利于【模型/控制/视图】的分离。
 *
 * 在【curve1】的例子中，
 * 应用程序中的所有对象都要通过监听 滑动条组件的变化，从而更新自己。
 * 为了复用代码，将 域对象 【tpeak】分离出来，并使所有对象依赖它而发生变化。
 *
 *
 * 在【curve2】的例子中，
 * 只有域对象 【tpeak2】 与滑动条组件 相联系， 当 滑动条发生变化时，就会改变【tpeak2】的状态；
 * 【tpeak2】 通过方法 【setChanged()】来检查自身的状态是否变化；
 * 若变化了，则通过 方法 【notifyObservers()】， 通知所有依赖于它的对象，
 * 并调用各个对象的  【update()】 来更新各个对象。
 *
 *
 *
 *
 */

