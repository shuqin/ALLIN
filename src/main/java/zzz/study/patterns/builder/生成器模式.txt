/*
 * 生成器模式【Builder】：
 * 将目标对象的构造逻辑移出该类，创建一个生成器类，专门用来获取该目标对象信息并创建该对象。
 * 
 * 当目标对象的信息只能逐步获取，或者构造过程非常复杂时，可以采用生成器模式，
 * 降低该目标类的复杂性【将构造过程作为一个独立任务，用单独的类来实现】。
 *
 * 例子中：
 * 一次有效的申请【Reservation】，必须包括date, headcount, city, yuanPerHead, hasSite 五个参数。
 * 这五个参数并不一定能够一次获得；
 * 如果先创建一个【Reservation】对象，然后再逐步设置其属性，其缺陷在于，
 * 创建的对象很可能并不能代表一次有效的请求，即创建了无效的目标对象。
 *
 * 这里的问题是： 要么不创建，要么就必须创建有效的 【Reservation】 对象。
 *
 * 采用生成器模式， 将 Reservation 对象的构造过程单独使用类【ReservationBuilder】（或其子类）来实现；
 * 而参数的获取和解析过程，则使用类【ReservationParser】来实现。
 *
 * 这样，
 *【Reservation】类非常简单，除了提供一个构造器和打印功能以外，几乎不做其它事情；
 *【ReservationBuilder】类 和 【ReservationParser】 则各司其职， 责任分明。
 *
 * 生成器模式特别适合于从字符串中解析参数获取对象信息，或从图形用户界面中获取对象信息并构造对象。
 *
 */
 
 