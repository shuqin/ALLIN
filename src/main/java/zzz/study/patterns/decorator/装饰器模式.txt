/*
 * 装饰器模式【Decorator】:
 * 在运行时动态地组合操作的新变化。
 *
 * 例如在本例中，
 * 首先声明一个超类Function; 
 * 然后，Arithmetic 实现了函数的加减乘除运算 : 
 *      f1(t)+f2(t), f1(t)-f2(t), f1(t)*f2(t), f1(t)/f2(t);
 * Sin, Cos, Sqrt, Exp 分别接受一个函数对象，并输出一个函数，实现了函数的复合运算:
 * Sin(f(t)), Cos(f(t)), Sqrt(f(t)), Exp(f(t)),
 * 如此，在运行时可动态地不断地在已有函数对象的基础上创建新的函数对象。
 *
 * 函数的行为通过公共操作方法 f() 来实现；
 * 函数对象的构造通过构造器来实现。
 *
 * 通过构造器来构造新对象；
 * 通过实现公共方法来组合新操作。
 *
 */