/*
 * 适配器模式：
 * 保留现有类的服务，向客户提供接口，以满足客户的期望。
 * 有两种适配方式： 适配类与适配对象
 *
 * 适配器类：
 * 当客户指定接口中的需求时，通常可以创建一个新类来实现接口和扩展现有类，
 * 这种方法创建一个类适配器，它将客户的调用转变为调用现有类的方法；
 *
 *
 * 在例子中，客户代码依赖于接口 RequiredInterface 的方法 requiredMethod 提供的服务；
 * 而现有类 ExistingClass 的方法 usefulMethod 可以满足该服务的要求；只是方法名不同； 
 * 这时，可以创建一个新类 NewClass， 继承 ExistingClass, 实现 RequiredInterface, 
 * 将 RequiredMethod 方法请求转发给 usefulMethod。
 *
 * 注意： NewClass 在逻辑意义上应该是 ExistingClass 的子类。
 *
 *
 * 适配类的注意事项：
 * 不要为了复用一个方法逻辑而破坏概念模型。例如，不要为了复用“植物”类的新陈代谢操作，
 * 而将“人”类从“植物”类继承。
 *
 * 
 * 对象适配器：
 * 当客户没有指定接口中的需求时，可以使用现有类的实例来创建一个新的客户子类，
 * 这种方法会创建一个对象适配器，将客户调用转发给现有类的实例。
 *
 * 使用对象适配器的场合：
 * 1。  所适配的接口可以得到抽象类的支持；
 * 2。 适配器类要需要从多个对象中提取信息；
 * 3。 无法使用多重继承；或者不存在继承关系。
 *
 * 在例子中， RocketTable 是一个对象适配器， 适配AbstractTableModel.
 * 这里， 抽象类AbstractTableModel实现了TableModel接口的大部分方法,
 * 而客户需求依赖于TableModel接口所提供的服务。
 *
 * 所适配的接口TableModel已经得到抽象类AbstractTableModel的支持；
 * 对象适配器 RocketTable 必须从多个对象中提取信息。【这里没有用到这个特点】
 */