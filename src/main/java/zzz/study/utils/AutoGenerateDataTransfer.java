package zzz.study.utils;

import cc.lovesq.model.CreativeDO;

import java.lang.reflect.Field;

import static zzz.study.utils.BaseTool.*;

/**
 * Created by shuqin on 16/5/3.
 */
public class AutoGenerateDataTransfer {

    private static final String dataTransferTpl =
            "package cc.lovesq.transfer;\n" +
                    "\n" +
                    "import cc.lovesq.model.$modelClsName;\n" +
                    "import cc.lovesq.pojo.$doClsName;\n\n" +
                    "public class $modelClsNameDataTransfer { \n\n" +
                    indent(4) + "$doToModelMethod\n\n" +
                    indent(4) + "$modelToDOMethod\n\n" +
                    "}";

    private static final String doToModelTpl =
            "public static $modelClsName transfer2TO($doClsName $doInstName) {\n" +
                    indent(8) + "if ($doInstName == null) {\n" +
                    indent(12) + "return null;\n" +
                    indent(8) + "}\n" +
                    "\n" +
                    indent(8) + "$modelClsName $modelInstName = new $modelClsName();\n" +
                    indent(0) + "$setStatement\n" +
                    indent(8) + "return $modelInstName;\n" +
                    indent(4) + "}";

    private static final String modelToDOTpl =
            "public static $doClsName transfer2DO($modelClsName $modelInstName) {\n" +
                    indent(8) + "if ($modelInstName == null) {\n" +
                    indent(12) + "return null;\n" +
                    indent(8) + "}\n" +
                    "\n" +
                    indent(8) + "$doClsName $doInstName = new $doClsName();\n" +
                    indent(0) + "$setStatement\n" +
                    indent(8) + "return $doInstName;\n" +
                    indent(4) + "}";

    public static void main(String[] args) {

        autoGenDataTransfer(CreativeDO.class);
    }

    /**
     * 根据 DO 类自动生成 Model 类以及 DataTransfer 类
     *
     * @param doCls DO 类
     */
    public static void autoGenDataTransfer(Class<?> doCls) {

        String doClassName = doCls.getSimpleName();
        Field[] fields = doCls.getDeclaredFields();
        String doInstName = firstToLower(doClassName);
        String modelInstName = strip(doInstName, "DO");
        String modelClsName = firstToUpper(modelInstName);
        StringBuilder setStatementAll = new StringBuilder();
        for (Field f : fields) {
            String fieldName = f.getName();
            String setStatement = String.format("%s%s.set%s(%s.get%s());\n", indent(8),
                    modelInstName, firstToUpper(fieldName), doInstName, firstToUpper(fieldName));
            setStatementAll.append(setStatement);
        }
        String setStatementAllStr = setStatementAll.toString();
        String do2modelMethod = doToModelTpl.replaceAll("\\$modelClsName", modelClsName)
                .replaceAll("\\$modelInstName", modelInstName)
                .replaceAll("\\$doClsName", doClassName)
                .replaceAll("\\$doInstName", doInstName)
                .replaceAll("\\$setStatement", setStatementAllStr);

        StringBuilder setStatementAllBuilder2 = new StringBuilder();
        for (Field f : fields) {
            String fieldName = f.getName();
            String setStatement = String.format("%s%s.set%s(%s.get%s());\n", indent(8),
                    doInstName, firstToUpper(fieldName), modelInstName, firstToUpper(fieldName));
            setStatementAllBuilder2.append(setStatement);
        }
        String setStatementAll2 = setStatementAllBuilder2.toString();
        String model2doMethod = modelToDOTpl.replaceAll("\\$modelClsName", modelClsName)
                .replaceAll("\\$modelInstName", modelInstName)
                .replaceAll("\\$doClsName", doClassName)
                .replaceAll("\\$doInstName", doInstName)
                .replaceAll("\\$setStatement", setStatementAll2);

        String packageName = doCls.getPackage().getName();
        String bizType = getBizType(packageName);
        String dataTransferClassContent = dataTransferTpl.replaceAll("\\$modelClsName", modelClsName)
                .replaceAll("\\$doClsName", doClassName)
                .replaceAll("\\$bizType", bizType)
                .replaceAll("\\$doToModelMethod", do2modelMethod)
                .replaceAll("\\$modelToDOMethod", model2doMethod);

        //System.out.println(dataTransferClassContent);

        String doClsRelativePath = "/cc/lovesq/pojo/" + doClassName + ".java";
        String doClsPath = ALLIN_PROJ_PATH_SRC + doClsRelativePath;
        String doClsContent = readFile(doClsPath);

        System.out.println(doClsContent);
        String modelClsContent = doClsContent.replace(doClassName, modelClsName)
                .replace("pojo", "model");

        String modelClsRelativePath = "/cc/lovesq/model/" + modelClsName + ".java";
        String modelClsPath = ALLIN_PROJ_PATH_SRC + modelClsRelativePath;
        writeFile(modelClsPath, modelClsContent);

        String transferRelativePath = "/cc/lovesq/transfer";
        String qualifiedPath = ALLIN_PROJ_PATH_SRC + transferRelativePath + "/";
        System.out.println(dataTransferClassContent);
        String writeFilePath = qualifiedPath + modelClsName + "DataTransfer.java";
        System.out.println("Write: " + writeFilePath);
        writeFile(writeFilePath, dataTransferClassContent);
    }


}
